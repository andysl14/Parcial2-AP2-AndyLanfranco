<h3>RCobros</h3>

@page "/Cobros"
@page "/Cobros/{CobroId:int}"

@inject IToastService Toast

<EditForm Model="Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="container">
            <div class="card-header">
                <h3>Registro cobro</h3>
            </div>

            <div class="card-body">
                <form>

                    @*Primera parte*@
                    <div class="form-group form-inline">
                        <div class="form-group col-6">
                            <label> Cobro Id </label>
                            &nbsp;
                            <div class="input-group">
                                <InputNumber @bind-Value="Cobro.CobroId" class="form-control col-6" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-secondary input-group-text oi oi-magnifying-glass" @onclick="Buscar">Buscar</button>
                                </div>
                                <ValidationMessage For="@(() => Cobro.CobroId)" />
                            </div>
                        </div>

                        <div class="form-group col-6">
                            <label>Fecha</label>
                            &nbsp;
                            <div class="input-group">
                                <InputDate @bind-Value="Cobro.Fecha" class="form-control" />
                                <ValidationMessage For="@(() => Cobro.Fecha)" />
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Cliente ID</label>
                        <select @bind="Cobro.ClienteId" class="form-control" @onblur="ObtenerVentasPendientes">
                            <option value="0" disabled selected>Seleccione un cliente</option>
                            @foreach (var item in lista)
                            {
                                <option value="@item.ClienteId">@item.Nombres</option>
                            }
                        </select>
                    </div>


                    <div class="form-group">
                        <label>Facturas Pendientes</label>

                        <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                            <table class="table table-striped">
                                <thead style="background-color: gray;">
                                    <tr>
                                        <th>ID</th>
                                        <th>Fecha</th>
                                        <th>Monto</th>
                                        <th>Balance</th>
                                        <th>Cobrado</th>
                                        <th>Pagar</th>

                                    </tr>
                                </thead>
                                <tbody style="background-color: white;">
                                    @foreach (var item in Cobro.CobrosDetalle)
                                    {
                                        <tr>
                                            <td>@item.VentaId</td>
                                            <td>@item.Venta.Fecha.ToString("dd/MM/yyyy")</td>
                                            <td>@item.Venta.Monto.ToString("N2")</td>
                                            <td>@item.Venta.Balance.ToString("N2")</td>
                                            <td>@item.Cobrado.ToString("N2")</td>
                                            <td> <input type="checkbox" @onchange="@(() => Cobrar(item))" /> </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class=" form-group form-inline">
                        <div class="form-group col-6">
                            <label>Totales</label>
                            &nbsp;
                            <span class="form-control">@Cobro.CobrosDetalle.Count()</span>
                        </div>

                        <div class="form-group col-6">
                            <label>Total cobrado</label>
                            &nbsp;
                            <InputNumber @bind-Value="Cobro.TotalCobrado" class="form-control" readOnly="true" />
                            <ValidationMessage For="@(() => Cobro.TotalCobrado)" />
                        </div>
                    </div>

                    <div class="form-group ">
                        <label>Observaciones</label>
                        <textarea @bind="Cobro.Observaciones" class="form-control" row="5" placeholder="Observaciones" />
                    </div>


                </form>
            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary oi oi-file" @onclick="Nuevo">Nuevo</button>
                    <button type="submit" name="Guardado" class="btn btn-lg btn-success oi oi-cloud-upload">Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger oi oi-trash" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {

    [Parameter]
    public int CobroId { get; set; }
    private Cobros Cobro = new Cobros();
    List<Clientes> lista = new List<Clientes>();

    [Inject]
    private VentasBLL ventasBLL { get; set; }
    private CobrosBLL cobrosBLL { get; set; }

    [Inject]
    private ClientesBLL clientesBLL { get; set; }

    protected override async void OnInitialized()
    {
        Nuevo();
        await BuscarParametro();
        lista = await clientesBLL.GetClientes(p => true);
    }

    private async Task BuscarParametro()
    {
        if(CobroId > 0)
        {
            var cobrar = await cobrosBLL.Buscar(CobroId);

            if (cobrar != null)
            {
                cobrar.CobrosDetalle = await ventasBLL.GetVentasCobradas(cobrar.ClienteId);
                this.Cobro = cobrar;

            }
            else
            {
                Toast.ShowError("El cobro no existe");
            }
        }
    }

    private void Nuevo()
    {

        Limpiar();
    }

    private async void Buscar()
    {
        var cobro = await cobrosBLL.Buscar(Cobro.CobroId);

        if (cobro != null)
        {
            cobro.CobrosDetalle = await ventasBLL.GetVentasCobradas(cobro.ClienteId);
            this.Cobro = cobro;
        }
        else
            Toast.ShowError("El cobro no existe");

    }

    private async void Guardar()
    {
        Cobro.CobroId = this.CobroId;
        Cobro.CobrosDetalle.RemoveAll(d => d.Cobrado == 0);

        if(await cobrosBLL.Guardar(Cobro))
        {
            Toast.ShowSuccess("Registro Guardado");
            Limpiar();
        }
        else
        {
            Toast.ShowError("No se logro Guardar el Registro");
        }
    }

    private async void Eliminar()
    {
        if(await cobrosBLL.Eliminar(this.CobroId))
        {
            Toast.ShowSuccess("Registro Eliminado");
            Limpiar();
        }
        else
        {
            Toast.ShowError("No se pudo eliminar el registro");
        }
    }

    private void Limpiar()
    {
        Cobro = new Cobros();
        this.CobroId = 0;
        Cobro.Fecha = DateTime.Now;
    }

    private void Cobrar(CobrosDetalle cobrosDetalle)
    {
        if (cobrosDetalle.Cobrado == 0)
        {
            cobrosDetalle.Cobrado = cobrosDetalle.Venta.Balance;
            Cobro.TotalCobrado += cobrosDetalle.Cobrado;
        }
        else
        {
            cobrosDetalle.Cobrado = 0;
            Cobro.TotalCobrado -= cobrosDetalle.Venta.Balance;
        }
    }

    private async Task ObtenerVentasPendientes()
    {
        if (Cobro.CobroId == 0)
            Cobro.CobrosDetalle = await ventasBLL.GetVentasPendientes(Cobro.ClienteId);
    }


}
